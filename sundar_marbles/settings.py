"""
Django settings for sundar_marbles project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import os
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-yrp*==m^4cd#^a_mxfw_i0(x$#lph(c1_g&)6c-7bo2!n06m5-')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1', cast=lambda v: [s.strip() for s in v.split(',')])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third party apps
    'rest_framework',
    'corsheaders',
    
    # Local apps
    'products',
]

# Only add storages if Azure is configured
try:
    if config('AZURE_ACCOUNT_NAME', default=None) and config('AZURE_ACCOUNT_KEY', default=None):
        INSTALLED_APPS.append('storages')
except Exception:
    pass

# Only add other apps if they're properly configured
try:
    from gallery.models import GalleryCategory
    INSTALLED_APPS.append('gallery')
except Exception:
    pass

try:
    from contact.models import ContactMessage  
    INSTALLED_APPS.append('contact')
except Exception:
    pass

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'sundar_marbles.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sundar_marbles.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(
        default='postgresql://neondb_owner:npg_qrXsNK3Jpk8i@ep-divine-tooth-a8gxgnc6-pooler.eastus2.azure.neon.tech/neondb?sslmode=require&channel_binding=require',
        conn_max_age=600,
        conn_health_checks=True,
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Azure Blob Storage configuration for media files
# Always use Azure Blob Storage if credentials are available
try:
    if config('AZURE_ACCOUNT_NAME', default=None) and config('AZURE_ACCOUNT_KEY', default=None):
        # Use Azure Blob Storage for media files
        AZURE_ACCOUNT_NAME = config('AZURE_ACCOUNT_NAME')
        AZURE_ACCOUNT_KEY = config('AZURE_ACCOUNT_KEY')
        AZURE_CONTAINER = config('AZURE_CONTAINER', default='media')
        
        # Configure Azure Storage with proper settings for django-storages
        STORAGES = {
            "default": {
                "BACKEND": "storages.backends.azure_storage.AzureStorage",
            },
            "staticfiles": {
                "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
            },
        }
        
        # Azure Storage Settings
        AZURE_CUSTOM_DOMAIN = f'{AZURE_ACCOUNT_NAME}.blob.core.windows.net'
        MEDIA_URL = f'https://{AZURE_CUSTOM_DOMAIN}/{AZURE_CONTAINER}/'
        
        # Additional Azure settings for proper operation
        AZURE_CONNECTION_TIMEOUT_SECS = 60
        AZURE_BLOB_MAX_MEMORY_SIZE = 2*1024*1024  # 2MB
        AZURE_OVERWRITE_FILES = True  # Allow overwriting existing files
        AZURE_LOCATION = ''  # Root of container
        
        print(f"‚úÖ Using Azure Blob Storage: {MEDIA_URL}")
        
    elif config('AZURE_STORAGE_CONNECTION_STRING', default=None):
        # Alternative: Azure Blob Storage settings using connection string
        AZURE_STORAGE_CONNECTION_STRING = config('AZURE_STORAGE_CONNECTION_STRING')
        AZURE_CONTAINER = config('AZURE_CONTAINER', default='media')
        
        # Extract account name from connection string for media URL
        import re
        account_match = re.search(r'AccountName=([^;]+)', AZURE_STORAGE_CONNECTION_STRING)
        AZURE_ACCOUNT_NAME = account_match.group(1) if account_match else 'sundarmarbles'
        
        # Configure Azure Storage with proper settings for django-storages
        STORAGES = {
            "default": {
                "BACKEND": "storages.backends.azure_storage.AzureStorage",
            },
            "staticfiles": {
                "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
            },
        }
        
        AZURE_CUSTOM_DOMAIN = f'{AZURE_ACCOUNT_NAME}.blob.core.windows.net'
        MEDIA_URL = f'https://{AZURE_CUSTOM_DOMAIN}/{AZURE_CONTAINER}/'
        
        # Additional Azure settings for proper operation
        AZURE_CONNECTION_TIMEOUT_SECS = 60
        AZURE_BLOB_MAX_MEMORY_SIZE = 2*1024*1024  # 2MB
        AZURE_OVERWRITE_FILES = True  # Allow overwriting existing files
        AZURE_LOCATION = ''  # Root of container
        
        print(f"‚úÖ Using Azure Blob Storage (connection string): {MEDIA_URL}")
    else:
        # Local media files (fallback for development)
        STORAGES = {
            "default": {
                "BACKEND": "django.core.files.storage.FileSystemStorage",
            },
            "staticfiles": {
                "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
            },
        }
        MEDIA_URL = '/media/'
        MEDIA_ROOT = BASE_DIR / 'media'
        print(f"‚ö†Ô∏è  Using local media storage: {MEDIA_URL}")

except Exception as e:
    # Fallback to local storage if Azure configuration fails
    print(f"‚ö†Ô∏è  Azure storage configuration failed: {e}")
    STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
        },
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        },
    }
    MEDIA_URL = '/media/'
    MEDIA_ROOT = BASE_DIR / 'media'
    print(f"üîÑ Falling back to local media storage: {MEDIA_URL}")
    MEDIA_URL = '/media/'
    MEDIA_ROOT = BASE_DIR / 'media'
    print(f"‚ö†Ô∏è  Using local media storage: {MEDIA_URL}")

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 8  # Changed from 20 to 8 for better initial loading performance
}

# CORS settings
CORS_ALLOWED_ORIGINS = config(
    'CORS_ALLOWED_ORIGINS', 
    default='http://localhost:3000,http://127.0.0.1:3000,http://localhost:5173,http://127.0.0.1:5173',
    cast=lambda v: [s.strip() for s in v.split(',')]
)

CORS_ALLOW_CREDENTIALS = True

# WhatsApp Configuration
WHATSAPP_NUMBER = config('WHATSAPP_NUMBER', default='923006641727')
WHATSAPP_API_URL = config('WHATSAPP_API_URL', default='https://api.whatsapp.com/send')

# Email Configuration
EMAIL_BACKEND = config('EMAIL_BACKEND', default='django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')

# Timezone
TIME_ZONE = 'Asia/Karachi'
